----------Условие----------
Учитывая массив целых чисел nums и целое число target, верните индексы двух чисел так, чтобы они составляли в суммеtarget .
Вы можете предположить, что каждый вход будет иметь ровно одно решение , и вы не можете использовать один и тот же элемент дважды.
Вы можете вернуть ответ в любом порядке.

Пример 1:

Ввод: nums = [2,7,11,15], target = 9
 Вывод: [0,1]
 Объяснение: Поскольку nums[0] + nums[1] == 9, мы возвращаем [0, 1].
Пример 2:

Ввод: числа = [3,2,4], цель = 6
 Вывод: [1,2]
Пример 3:

Ввод: числа = [3,3], цель = 6
 Вывод: [0,1]

----------Решение----------
func twoSum(nums []int, target int) []int {
	// Создаем пустой словарь для хранения уже просмотренных элементов и их индексов
	seen := make(map[int]int)

	for i, num := range nums {
		// Вычисляем значение, которое нужно искать в словаре
		diff := target - num

		// Если значение уже было добавлено в словарь, то это значит, что мы нашли два числа, которые в сумме дают target
		if j, ok := seen[diff]; ok {
			return []int{j, i}
		}

		// Добавляем текущий элемент и его индекс в словарь
		seen[num] = i
	}

	// Если ни одна пара чисел не дала в сумме target, то возвращаем пустой слайс
	return []int{}
}